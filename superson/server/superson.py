import sys
import cv2
import os
from sys import platform
import argparse
import math
from time import sleep
import time
import numpy as np
import socket
from numpy import dot
import argparse
from numpy.linalg import norm

######## import openpose library part ##########

dir_path = os.path.dirname(os.path.realpath(__file__))

try:
	sys.path.append('build/python')
	from openpose import pyopenpose as op
except ImportError as e:
	print('Error: OpenPose library could not be found. Did you enable `BUILD_PYTHON` in CMake and have this Python script in the right folder?')
	raise e

params = dict()
params["model_folder"] = "models/"

################################################


#### 영상의 source를 argument로 하여 받아옴
parser = argparse.ArgumentParser(description='source,width,height')
parser.add_argument('--source', required=True, help='video source')
parser.add_argument('--w', required=False, default=720, help='video width')
parser.add_argument('--h', required=False, default=480, help='video height')
parser.add_argument('--timer', required=False, default=60, help='timer')

args = parser.parse_args()
###

# socket communication with raspberry pi
HOST = '192.168.0.26'#내부 ip 입력
PORT = 9999

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
server_socket.bind((HOST,PORT))
server_socket.listen()
print("wait for socket client")
client_socket, addr = server_socket.accept()
print('connect by', addr)

score_state = "No Score"
presskey = 1
ch = 0 # 운동 선택 및 종료를 위해 입력된 키보드 값 저장 변수

def poseEval(pose):
	if pose == 1:
		print("허리를 더 내리세요")
		client_socket.sendall('hurrydown'.encode())
	elif pose == 2:
		print("허리를 더 올리세요")
		client_socket.sendall('hurryup'.encode())
	elif pose == 3:
		print("팔을 더 피세요")
		client_socket.sendall('palup'.encode())
	elif pose == 4:
		print("팔을 더 굽히세요")
		client_socket.sendall('paldown'.encode())
	elif pose == 5:
		print("몸통을 일직선으로 유지하세요")
	elif pose == 6:
		print("다리를 일직선으로 유지하세요")

# openpose를 이용하여 영상 내에서 keypoint와 keypoint가 출력된 영상을 받아오는 함수
def getKeypoint(capture):
	datum = op.Datum()
	ret, frame = capture.read()
	datum.cvInputData = frame
	opWrapper.emplaceAndPop([datum])
	getkey = datum.poseKeypoints
	getkeys = np.ravel(getkey, order='C')
	return datum.cvOutputData, getkeys

#주어진 좌표를 이용해 각도를 계산하는 함수
def angle(start_x, start_y, mid_x, mid_y, end_x, end_y):
	result = abs(math.atan2(start_y-mid_y, start_x-mid_x) - math.atan2(end_y-mid_y, end_x-mid_x))* 180/math.pi
	return result>180 and 360-result or result


#arr1: keypoint
#arr2: 비교할 대상
#keypoint_LR: 운동하는 사람 왼쪽인지 오른쪽인지
#test_LR: 비교하는 사람 왼쪽, 오른쪽인지
def normalize(arr1, arr2, keypoint_LR, test_LR):
	test_LR= False
	coord1 = arr1[0:75]
	x1 = np.array(coord1[0::3])
	y1 = np.array(coord1[1::3])
	conf1 = np.array(coord1[2::3])
	newx1 = []
	newy1 = []
	newcoord1 = []

	coord2 = arr2[0:75]
	x2 = np.array(coord2[0::3])
	y2 = np.array(coord2[1::3])
	conf2 = np.array(coord2[2::3])
	newx2 = []
	newy2 = []
	newcoord2 = []
	#정확도 0이 아닌 좌표들 얻기
	for i in range(len(x1)):
		#if i==0 or i == 15 or i == 16 or i == 17 or i == 18:
		#	continue
		if conf1[i] != 0 and conf2[i] != 0:
			newx1.append(x1[i])
			newy1.append(y1[i])
			newx2.append(x2[i])
			newy2.append(y2[i])
	#keypoint 정규화
	#최대, 최솟값
	x_min = np.min(newx1)
	x_max = np.max(newx1)
	y_min = np.min(newy1)
	y_max = np.max(newy1)
	scale_factor = max(y_max - y_min, x_max - x_min)
	#x, y 평균
	x_mean = sum(newx1)/len(newx1)
	y_mean = sum(newy1)/len(newy1)
	#정규화
	for i in range(len(newx1)):
		if keypoint_LR == True:
			newcoord1.append((newx1[i] - x_mean) / scale_factor)
		else:
			newcoord1.append(-((newx1[i] - x_mean) / scale_factor))
		newcoord1.append((newy1[i] - y_mean) / scale_factor)
	#비교좌표 정규화
	x_min = np.min(newx2)
	x_max = np.max(newx2)
	y_min = np.min(newy2)
	y_max = np.max(newy2)
	scale_factor = max(y_max - y_min, x_max - x_min)
	# x, y 평균
	x_mean = sum(newx2) / len(newx2)
	y_mean = sum(newy2) / len(newy2)
	# 정규화
	for i in range(len(newx2)):
		if test_LR == True:
			newcoord2.append((newx2[i] - x_mean) / scale_factor)
		else:
			newcoord2.append(-((newx2[i] - x_mean) / scale_factor))
		newcoord2.append((newy2[i] - y_mean) / scale_factor)
	return newcoord1, newcoord2

#vector1: keypoint
#vector2: 비교할 대상
def weightedMatching(vector1, vector2):
	return dot(vector1, vector2) / (norm(vector1) * norm(vector2))

#keypoint: 운동하는 사람 좌표
#testCoord: 비교할 대상 좌표들
#keypoint_LR: 운동하는 사람 왼쪽인지 오른쪽인지
#test_LR: 비교 좌표 왼쪽, 오른쪽인지
def getSimilarity(keypoint, testCoord, keypoint_LR, test_LR):
	test_LR= False
	similarity = []
	for i in range(len(testCoord)):
		v1, v2 = normalize(keypoint, testCoord[i], keypoint_LR, test_LR)
		similarity.append(weightedMatching(v1, v2))
	return sum(similarity)/len(similarity)

# 이미지를 출력하는 함수
def image(frame, score_state, count, timer) :
	if presskey == 1: #when program start get option by key
		cv2.putText(frame, "Press Key '1' for Push Up, '2' for Sit Up", (40,200), cv2.FONT_HERSHEY_SIMPLEX, 1, (120, 255, 120), 4)
	else :				#when program in run state print count, score, timer
		cv2.putText(frame, str(count), (530, 80), cv2.FONT_HERSHEY_SCRIPT_SIMPLEX, 2.5, (255, 255, 0), 4)
		
		if score_state == "Bad":
			color = (0,0,255)
		elif score_state == "Normal":
			color = (255,0,255)
		else :
			color = (0,255,0)
		cv2.putText(frame, str(score_state), (20, 400), cv2.FONT_HERSHEY_SCRIPT_SIMPLEX, 2.5, color, 4)
		cv2.putText(frame, str(round(timer, 2)), (20, 50), cv2.FONT_HERSHEY_SCRIPT_SIMPLEX, 1.5, (0, 255, 255), 4)
	cv2.imshow("Super Son", frame)
	global ch
	ch = cv2.waitKey(1)
	if ch == ord('q') : sys.exit(-1)
	#when press 'q' exit

### 팔굽혀 펴기 ###
#화면출력: 초기 자세 설정할 때
def imageInitialize(frame, statePose, state_Left, pushup) :
	initmessage = ""

	if pushup == True:
		if statePose == 1:
			initmessage = "Left arm isn't recognized."
		elif statePose == 2:
			initmessage = "Right arm isn't recognized."
		elif statePose == 3:
			initmessage = "Move right"
		elif statePose == 4:
			initmessage = "Move left"
		elif statePose == 5:
			initmessage = "Move up"
		elif statePose == 6:
			initmessage = "Move down"
		elif statePose == 7:
			initmessage = "Stretch out your arms enough"
		elif statePose == 8:
			initmessage = "Stretch out your body enough"
		elif statePose == 9:
			initmessage = "Stretch out your leg enough"
		elif statePose == 10:
			initmessage = "Person isn't recognized"
		else:
			initmessage = "Ready. Press key 's'"
		cv2.putText(frame, str(initmessage), (50, 80), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 4)
		if state_Left == True:
			img2 = cv2.imread("img1.png", -1)  # 팔굽혀펴기 자세 이미지(left)
		else:
			img2 = cv2.imread("img2.png", -1)  # 팔굽혀펴기 자세 이미지(right)
	else:
		initmessage = "Ready. Press key 's'"
		cv2.putText(frame, str(initmessage), (50, 80), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 4)
		if state_Left == True:
			img2 = cv2.imread("img3.png", -1)  # 윗몸일으키기 자세 이미지(left)
		else:
			img2 = cv2.imread("img4.png", -1)  # 윗몸일으키기 자세 이미지(right)

	img1 = frame
	h, w, c = img2.shape

	img1 = cv2.resize(img1, (w, h), interpolation=cv2.INTER_CUBIC)
	result = np.zeros((h, w, 3), np.uint8)
	alpha = img2[:, :, 3] / 255.0
	result[:, :, 0] = (1. - alpha) * img1[:, :, 0] + alpha * img2[:, :, 0]
	result[:, :, 1] = (1. - alpha) * img1[:, :, 1] + alpha * img2[:, :, 1]
	result[:, :, 2] = (1. - alpha) * img1[:, :, 2] + alpha * img2[:, :, 2]
	cv2.imshow("Super Son", result)
	global ch
	ch = cv2.waitKey(1)
	if ch == ord('q') : sys.exit(-1)

#### 초기 자세 설정 ####
#좌측에서 촬영했을 때
def initializePoseLeft(keypoint):
	#반환값
	#0: 모든 조건 충족, 1: 왼팔 인식 x, 2: 오른팔 인식 x
	#3: 카메라 우측 이동, #4: 카메라 좌측 이동, #5: 카메라 위로 이동, #6: 카메라 아래로 이동
	#7: 팔 충분히 피지 않음
	#8: 몸통 충분히 피지 않음
	#9: 다리 충분히 피지 않음

	#양 팔 인식되는지 확인
	if keypoint[17] == 0 or keypoint[20] == 0 or keypoint[23] == 0:
		return 1
	# if keypoint[8] == 0 or keypoint[11] == 0 or keypoint[14] == 0:
		# return 2
	#양 손의 x, y좌표 비교
	if keypoint[21] > keypoint[12] + 70:
		return 4
	if keypoint[21] < keypoint[12] - 70:
		return 3
	if keypoint[22] < keypoint[13] + 5:
		return 5
	if keypoint[22] > keypoint[13] + 80:
		return 6
	#각도 확인
	if angle(15, 16, 18, 19, 21, 22) < 160:
		return 7
	if angle(3, 4, 36, 37, 39, 40) < 160:
		return 8
	if angle(36, 37, 39, 40, 42, 43) < 160:
		return 9
	return 0
#우측에서 촬영했을 때
def initializePoseRight(keypoint):
	# 양 팔 인식되는지 확인
	if keypoint[8] == 0 or keypoint[11] == 0 or keypoint[14] == 0:
		return 2
	# if keypoint[17] == 0 or keypoint[20] == 0 or keypoint[23] == 0:
		# return 1
	#양 손의 x, y좌표 비교
	if keypoint[21] - 70> keypoint[12]:
		return 4
	if keypoint[21] + 70 < keypoint[12]:
		return 3
	if keypoint[22] + 5 > keypoint[13]:
		return 5
	if keypoint[22] + 80 < keypoint[13]:
		return 6
	#각도 확인
	if angle(6, 7, 9, 10, 12, 13) < 160:
		return 7
	if angle(3, 4, 27, 28, 30, 31) < 160:
		return 8
	if angle(27, 28, 30, 31, 33, 34) < 160:
		return 9
	return 0

capture = cv2.VideoCapture(args.source)
capture.set(cv2.CAP_PROP_FRAME_WIDTH, int(args.w))
capture.set(cv2.CAP_PROP_FRAME_HEIGHT, int(args.h))


count = 0
state = True # is person up?(True) or down?(False) when pushup
part = []
arm_his = []			#top, bottom을 구하기 위한 각도 데이터들
arm_angle_top = []	  #올라왔을때의 팔 각도 데이터들
arm_angle_bottom = []   #내려왔을때의 팔 각도 데이터들
body_his = []
body_angle_top = []
body_angle_bottom = []
leg_his = []
leg_angle_top = []
leg_angle_bottom = []
prev_list = []	  #모든 list 데이터들
prev_angle = []	 #모든 각도 데이터들
keypoint = []
keypoint_his = []
timer = int(args.timer)
upper_mean = 0 #mean x axis point of person upper_boddy
lower_mean = 0 #mean x axis point of person lower_boddy
state_Left = True
pushup = True  #check push up or sit up


# up state right[0:4] / waist up[5:9] / waist down[10:14]
temp = [
[5.99434387e+02,2.47179230e+02,7.82204688e-01,5.38143188e+02,2.14478119e+02,5.78657269e-01,5.38164062e+02,1.97555420e+02,7.18048334e-01,5.38159424e+02,2.96665314e+02,8.24122727e-01,5.47188171e+02,3.88055908e+02,8.05725455e-01,5.30295837e+02,2.32750137e+02,2.69932270e-01,5.15895264e+02,2.95376984e+02,7.91469812e-01,5.08131989e+02,3.59348236e+02,8.06612015e-01,3.99794037e+02,2.66706970e+02,3.75844330e-01,3.93292633e+02,2.61472473e+02,3.79693925e-01,2.90189270e+02,3.26738861e+02,3.29458416e-01,1.75361847e+02,3.78905884e+02,4.64085400e-01,4.06318970e+02,2.75839600e+02,2.17858225e-01,2.91492737e+02,3.17569061e+02,9.64340419e-02,1.72732651e+02,3.80234131e+02,2.13598222e-01,6.08562317e+02,2.40598541e+02,7.95255899e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.99384583e+02,2.13208572e+02,9.27851439e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.96225006e+02,4.19342194e+02,3.42296302e-01,1.98851242e+02,4.12907440e+02,3.57631862e-01,1.55785141e+02,3.74999695e+02,1.50755793e-01,1.97527710e+02,4.14133636e+02,3.39107335e-01,1.91013840e+02,4.12890045e+02,2.89078712e-01,1.62321426e+02,3.77592712e+02,4.37100172e-01],
[5.89027161e+02,2.56223480e+02,8.26678872e-01,5.35473694e+02,2.13219254e+02,5.81147552e-01,5.34192017e+02,2.00154083e+02,6.63884163e-01,5.36836060e+02,2.95424011e+02,8.22232008e-01,5.47186462e+02,3.88029541e+02,8.04662406e-01,5.31587646e+02,2.26234604e+02,2.51663327e-01,5.15891785e+02,2.92808960e+02,7.29977429e-01,5.12028687e+02,3.60609955e+02,8.03574324e-01,3.91967407e+02,2.66697083e+02,3.61838907e-01,3.89330627e+02,2.58869324e+02,3.65810215e-01,2.92795380e+02,3.25429138e+02,3.07095736e-01,1.71404221e+02,3.80234161e+02,5.93573034e-01,3.99773010e+02,2.75838470e+02,2.11912945e-01,2.96709686e+02,3.13678162e+02,9.54566747e-02,1.70149338e+02,3.80244995e+02,1.18608490e-01,5.99387512e+02,2.47099854e+02,8.46219838e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.91626587e+02,2.21024399e+02,8.36099088e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.94941162e+02,4.16763031e+02,2.12766662e-01,1.98863876e+02,4.12835480e+02,2.20966130e-01,1.51878342e+02,3.73714325e+02,6.49261847e-02,1.93640442e+02,4.12904480e+02,4.52559888e-01,1.81874649e+02,4.14140015e+02,4.05248612e-01,1.58396515e+02,3.78934906e+02,5.43023467e-01],
[5.86413879e+02,2.56260529e+02,8.12253177e-01,5.34215576e+02,2.14493805e+02,5.97404659e-01,5.30303711e+02,2.01430344e+02,6.71170533e-01,5.36833374e+02,2.95400726e+02,8.19017649e-01,5.47192505e+02,3.88048340e+02,8.11312854e-01,5.34213623e+02,2.24955856e+02,2.84635603e-01,5.15889954e+02,2.92792664e+02,7.30153799e-01,5.09443695e+02,3.60650787e+02,7.91374564e-01,3.91969513e+02,2.65409363e+02,3.55842471e-01,3.88067139e+02,2.56269989e+02,3.83694828e-01,2.86278839e+02,3.26698486e+02,2.79947698e-01,1.71433212e+02,3.80219269e+02,5.24923563e-01,3.99775360e+02,2.75826416e+02,1.96208805e-01,2.91493439e+02,3.16282227e+02,7.75446966e-02,1.68837555e+02,3.80266266e+02,1.43782198e-01,5.92923279e+02,2.48433517e+02,8.06611657e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.90332153e+02,2.22342041e+02,8.97029161e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.98843048e+02,4.16791077e+02,1.92898765e-01,2.00129745e+02,4.12896820e+02,2.05715418e-01,1.51826797e+02,3.77615601e+02,1.06786311e-01,1.97546143e+02,4.14137146e+02,3.66208345e-01,1.89718338e+02,4.14164551e+02,3.26078206e-01,1.59718094e+02,3.80187744e+02,5.06604671e-01],
[5.86398376e+02,2.56273865e+02,7.82126546e-01,5.35484131e+02,2.14481659e+02,5.91526210e-01,5.34173584e+02,2.02741013e+02,6.79892004e-01,5.36840332e+02,2.96649780e+02,8.20956469e-01,5.45964233e+02,3.88037567e+02,8.02375317e-01,5.35507202e+02,2.24956970e+02,2.70825952e-01,5.15870544e+02,2.92775696e+02,7.43376613e-01,5.09405334e+02,3.60628632e+02,8.04670632e-01,3.92005615e+02,2.66694275e+02,3.71245801e-01,3.88062439e+02,2.56236603e+02,3.81380528e-01,2.86272705e+02,3.26708099e+02,3.05580586e-01,1.71430710e+02,3.80256989e+02,5.63103735e-01,3.99804626e+02,2.77135925e+02,2.16767639e-01,2.88894165e+02,3.17608032e+02,6.94185346e-02,1.68826950e+02,3.80270508e+02,1.08934551e-01,5.95525757e+02,2.48411880e+02,7.87160575e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.91602173e+02,2.21030731e+02,8.54918361e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.93638931e+02,4.18068237e+02,2.04426616e-01,1.96252991e+02,4.12907837e+02,2.04828918e-01,1.51850189e+02,3.76319336e+02,7.54975975e-02,1.92340332e+02,4.14165741e+02,4.29079324e-01,1.81895508e+02,4.14166199e+02,3.74787390e-01,1.59683334e+02,3.80199829e+02,5.32459378e-01],
[5.86377869e+02,2.56292725e+02,7.69434631e-01,5.35507629e+02,2.14525101e+02,5.96052647e-01,5.32898376e+02,2.01467300e+02,6.65880620e-01,5.36846863e+02,2.95427795e+02,8.24439883e-01,5.45968445e+02,3.88055786e+02,8.11727762e-01,5.36802185e+02,2.27539093e+02,2.73173302e-01,5.15869873e+02,2.94099548e+02,7.32204139e-01,5.09398163e+02,3.60682770e+02,7.93196380e-01,3.94567810e+02,2.66684082e+02,3.37709695e-01,3.90641266e+02,2.56267853e+02,3.64916414e-01,2.86284546e+02,3.25403778e+02,2.73743987e-01,1.71433762e+02,3.80224976e+02,5.34676254e-01,4.01105164e+02,2.75843506e+02,1.92479521e-01,2.91495270e+02,3.16295197e+02,5.04635163e-02,1.68827393e+02,3.80262329e+02,1.30488187e-01,5.96814209e+02,2.48442154e+02,7.83977807e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.90378418e+02,2.21019928e+02,8.49877834e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.96242996e+02,4.16762878e+02,1.97506055e-01,1.98832047e+02,4.12885468e+02,2.09342137e-01,1.50595032e+02,3.77621094e+02,9.82939675e-02,1.93627380e+02,4.12906097e+02,3.63204986e-01,1.83183884e+02,4.14135040e+02,3.16152662e-01,1.59706985e+02,3.80208771e+02,5.01774311e-01],
[5.56384033e+02,2.65454071e+02,8.44633460e-01,5.05476105e+02,2.23647018e+02,5.82949936e-01,5.06841217e+02,2.05370926e+02,7.11380422e-01,5.18526550e+02,2.99331665e+02,7.86808312e-01,5.45938538e+02,3.88070801e+02,7.99889207e-01,4.97663757e+02,2.38011230e+02,3.27215046e-01,4.95111420e+02,2.98030396e+02,7.61319816e-01,5.10700378e+02,3.63284515e+02,7.50959754e-01,3.58025421e+02,2.05357910e+02,4.01580870e-01,3.58025177e+02,2.14523026e+02,4.05098736e-01,2.82364349e+02,2.98033203e+02,4.21988219e-01,1.83161987e+02,3.90611237e+02,6.91060066e-01,3.50220459e+02,1.92333038e+02,2.53372401e-01,2.79763367e+02,2.88875183e+02,1.47975549e-01,1.83196548e+02,3.86739044e+02,5.53751960e-02,5.65527893e+02,2.57548035e+02,8.25189948e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.61626343e+02,2.31478210e+02,8.34945798e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.21027222e+02,4.22010284e+02,6.62504807e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.59655991e+02,3.90568268e+02,6.97271675e-02,2.23648972e+02,4.19393005e+02,5.82147181e-01,2.09281128e+02,4.21951752e+02,5.04364014e-01,1.70138672e+02,3.91931244e+02,6.88147366e-01],
[5.57702393e+02,2.65402466e+02,8.16637099e-01,5.04198730e+02,2.24910019e+02,6.16246581e-01,5.06804749e+02,2.04092117e+02,7.36642420e-01,5.17291504e+02,2.98077057e+02,7.84896076e-01,5.45957581e+02,3.89337830e+02,8.23157549e-01,4.95074890e+02,2.41885880e+02,3.50476861e-01,4.96336853e+02,3.01921722e+02,7.25520313e-01,5.10706726e+02,3.63294312e+02,7.65520453e-01,3.58040741e+02,2.05356003e+02,4.25363392e-01,3.59335724e+02,2.15841034e+02,3.79349411e-01,2.81056976e+02,2.98004059e+02,3.68201882e-01,1.83204956e+02,3.89354553e+02,6.37003779e-01,3.50228363e+02,1.92307587e+02,3.11482549e-01,2.84943604e+02,2.86290344e+02,1.88703984e-01,1.84479309e+02,3.86740753e+02,6.63269013e-02,5.66841125e+02,2.56287720e+02,8.47072065e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.64190002e+02,2.28876938e+02,8.05080116e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.18417145e+02,4.21929626e+02,6.91009387e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.59719025e+02,3.89384308e+02,9.56855416e-02,2.23660202e+02,4.16773651e+02,5.66341758e-01,2.10589340e+02,4.20647491e+02,4.70495343e-01,1.71387497e+02,3.90695343e+02,6.76465392e-01],
[5.57660278e+02,2.65408295e+02,7.56013036e-01,5.05487732e+02,2.24903931e+02,6.40711486e-01,5.06826416e+02,2.04090363e+02,7.29841292e-01,5.18523804e+02,2.98081512e+02,7.87487209e-01,5.47192261e+02,3.89347046e+02,8.34345579e-01,4.96382141e+02,2.39312347e+02,3.65725726e-01,4.95099976e+02,2.97982880e+02,7.37965107e-01,5.09420593e+02,3.61962494e+02,7.97885239e-01,3.59374542e+02,2.05378571e+02,4.16544050e-01,3.60638275e+02,2.15808975e+02,4.08512741e-01,2.86270447e+02,2.97998444e+02,4.86945093e-01,1.83239868e+02,3.89353821e+02,6.45724833e-01,3.54136963e+02,1.92343277e+02,2.79310048e-01,2.84946411e+02,2.88892303e+02,2.44758263e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.68105591e+02,2.56282715e+02,8.50046575e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.64218384e+02,2.28855667e+02,8.16690862e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.23659485e+02,4.20668304e+02,5.71859479e-01,2.09280807e+02,4.21972656e+02,4.90816891e-01,1.71415924e+02,3.90697021e+02,6.68734610e-01],
[5.59033508e+02,2.65372528e+02,7.84698844e-01,5.05507080e+02,2.23623840e+02,6.66724563e-01,5.08099762e+02,2.02754242e+02,7.29976416e-01,5.18589172e+02,2.98022491e+02,7.70542920e-01,5.47190796e+02,3.89319550e+02,8.23764324e-01,4.96405670e+02,2.39293121e+02,4.01930749e-01,4.96337860e+02,2.98001831e+02,7.44467139e-01,5.08132660e+02,3.61938080e+02,8.05347383e-01,3.59372437e+02,2.04096497e+02,4.19921696e-01,3.60689850e+02,2.15822906e+02,4.25571024e-01,2.84959534e+02,2.96713837e+02,4.65030640e-01,1.83193039e+02,3.89377594e+02,6.59377575e-01,3.52840698e+02,1.92321686e+02,2.97491312e-01,2.86260986e+02,2.87557831e+02,1.82080165e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.69392639e+02,2.56238220e+02,8.62458825e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.65530640e+02,2.28840378e+02,8.29142451e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.23659409e+02,4.19367706e+02,5.55386722e-01,2.10574524e+02,4.21932404e+02,4.69461799e-01,1.71387131e+02,3.90679108e+02,6.82086110e-01],
[5.57694702e+02,2.65431305e+02,7.76343346e-01,5.05518555e+02,2.23665024e+02,6.26147628e-01,5.06855042e+02,2.04087418e+02,7.26171732e-01,5.18555420e+02,2.98013184e+02,7.89527714e-01,5.45971680e+02,3.89346497e+02,8.31513703e-01,4.96394653e+02,2.39287628e+02,3.50351393e-01,4.95112244e+02,2.98002289e+02,7.25928009e-01,5.10715057e+02,3.63260956e+02,7.51470268e-01,3.59340790e+02,2.05363678e+02,4.21940625e-01,3.59354156e+02,2.14522629e+02,4.10375625e-01,2.83646301e+02,2.97998688e+02,4.47888762e-01,1.83209930e+02,3.89370605e+02,6.27806365e-01,3.54141266e+02,1.92339844e+02,2.71869749e-01,2.81053558e+02,2.90190979e+02,1.81184188e-01,1.84501846e+02,3.88040253e+02,7.03179762e-02,5.68092896e+02,2.56289459e+02,8.49123597e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.62931274e+02,2.28848373e+02,8.19641590e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.19711884e+02,4.22023834e+02,6.48916960e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.59701492e+02,3.90591797e+02,8.18455070e-02,2.23648453e+02,4.19391693e+02,5.74148774e-01,2.09287735e+02,4.21938629e+02,4.97994304e-01,1.71382156e+02,3.90691589e+02,6.70045137e-01],
[6.04669250e+02,2.05383392e+02,7.62757361e-01,5.44625793e+02,2.18427414e+02,5.92482746e-01,5.36772217e+02,2.13141678e+02,7.62592912e-01,5.39444458e+02,3.01926697e+02,7.46279299e-01,5.42042969e+02,3.89353882e+02,7.84085453e-01,5.53775452e+02,2.24944305e+02,4.91643041e-01,5.31605957e+02,2.98014526e+02,5.41241765e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.62415985e+02,3.42376770e+02,3.32895160e-01,4.57228607e+02,3.43686920e+02,3.26152176e-01,3.37151917e+02,3.71069641e+02,2.90050834e-01,2.00128464e+02,3.82848541e+02,2.37086818e-01,4.66355316e+02,3.46300598e+02,2.12108105e-01,3.33249115e+02,3.65887787e+02,1.55885100e-01,1.96223083e+02,3.82819763e+02,3.77210051e-01,6.09818176e+02,1.93641129e+02,8.83833051e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.88999512e+02,1.81862930e+02,9.38022733e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.80571411e+02,4.16763367e+02,3.23086411e-01,1.84496033e+02,4.15460785e+02,3.64899993e-01,1.81881012e+02,3.73717896e+02,2.65989929e-01,1.75347717e+02,4.18077057e+02,1.81491762e-01,1.77951859e+02,4.12817291e+02,1.58718020e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00],
[6.05962097e+02,2.02715775e+02,8.05616021e-01,5.43342896e+02,2.15834457e+02,5.40422201e-01,5.36838928e+02,2.11910645e+02,7.87499905e-01,5.39474304e+02,2.99343323e+02,7.62928128e-01,5.42052673e+02,3.89329010e+02,7.73439169e-01,5.51179443e+02,2.23606522e+02,4.43239301e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.55904785e+02,3.39806946e+02,3.27133298e-01,4.54630066e+02,3.48886108e+02,3.57653528e-01,3.31947693e+02,3.76319305e+02,2.26913065e-01,1.96245544e+02,3.82816132e+02,2.22036317e-01,4.50695465e+02,3.30627899e+02,2.04031557e-01,3.28017609e+02,3.69795349e+02,1.74423307e-01,1.98832809e+02,3.81551117e+02,4.00075853e-01,6.08590149e+02,1.91015915e+02,8.44926417e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.87676880e+02,1.80581894e+02,8.74817431e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.79271576e+02,4.19385773e+02,3.25414300e-01,1.84497101e+02,4.16763245e+02,3.50268543e-01,1.81894394e+02,3.72387451e+02,2.78174400e-01,1.74061417e+02,4.19357269e+02,1.97567075e-01,1.75366348e+02,4.12872314e+02,1.67711988e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00],
[6.05986938e+02,2.02761047e+02,7.76690483e-01,5.45936157e+02,2.17133987e+02,5.85918307e-01,5.36861084e+02,2.11884125e+02,7.72539020e-01,5.43324036e+02,2.99298309e+02,7.60566711e-01,5.42016418e+02,3.89323273e+02,7.73901880e-01,5.55063965e+02,2.24917435e+02,4.76100594e-01,5.35512695e+02,2.99325684e+02,7.63063729e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.57210876e+02,3.39784607e+02,3.31133366e-01,4.55928894e+02,3.47589905e+02,3.62011790e-01,3.37165771e+02,3.73707794e+02,3.12831879e-01,2.00162079e+02,3.82825958e+02,2.09158912e-01,4.52005432e+02,3.30626343e+02,2.16998935e-01,3.37150421e+02,3.64568268e+02,1.90252706e-01,2.00146637e+02,3.82829193e+02,3.58255148e-01,6.09857117e+02,1.90995850e+02,8.45097840e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.88999207e+02,1.81834381e+02,9.15781558e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.75350739e+02,4.15483917e+02,3.29398155e-01,1.83185669e+02,4.15467072e+02,3.83263499e-01,1.88393646e+02,3.78895508e+02,2.24408761e-01,1.75365234e+02,4.16754272e+02,1.48439392e-01,1.77961899e+02,4.11554352e+02,1.35467052e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00],
[6.05981323e+02,2.02694382e+02,7.89751709e-01,5.42048523e+02,2.17129959e+02,5.60462773e-01,5.36768188e+02,2.13165085e+02,7.61749864e-01,5.40731384e+02,3.00610931e+02,7.43501246e-01,5.43338440e+02,3.89352051e+02,7.78744817e-01,5.51160767e+02,2.23642639e+02,4.61735040e-01,5.34209229e+02,2.97992493e+02,6.31789267e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.55914307e+02,3.39782135e+02,3.22928011e-01,4.55908051e+02,3.47592987e+02,3.43890131e-01,3.34552216e+02,3.71107117e+02,2.83622414e-01,1.94935516e+02,3.82842560e+02,2.12482050e-01,4.51986084e+02,3.29352386e+02,2.07301825e-01,3.28018280e+02,3.67157379e+02,2.01582134e-01,1.98837509e+02,3.81581024e+02,3.87539715e-01,6.08572327e+02,1.90976135e+02,8.24397147e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.86382996e+02,1.79291000e+02,8.39008391e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.81866684e+02,4.16754761e+02,2.93663442e-01,1.85792770e+02,4.15436401e+02,3.44074130e-01,1.83188416e+02,3.75008484e+02,2.47718707e-01,1.75366623e+02,4.16784790e+02,1.92859262e-01,1.76650787e+02,4.12846313e+02,1.62367240e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00],
[6.08572876e+02,2.02734055e+02,8.03092659e-01,5.45906067e+02,2.18399826e+02,5.79971135e-01,5.36819824e+02,2.11904861e+02,7.69304752e-01,5.43335876e+02,2.99348511e+02,7.46364832e-01,5.43326904e+02,3.89356781e+02,7.77291775e-01,5.53760254e+02,2.23672501e+02,4.60957229e-01,5.13302795e+02,3.21492279e+02,1.26401812e-01,5.15917542e+02,3.69778320e+02,2.71775395e-01,4.53291290e+02,3.37175415e+02,3.54530185e-01,4.54591125e+02,3.42393799e+02,3.92400473e-01,3.29335724e+02,3.68454498e+02,3.49407554e-01,2.05365280e+02,3.80257660e+02,2.71285146e-01,4.45504028e+02,3.26719910e+02,2.64688969e-01,3.28021301e+02,3.60618774e+02,2.79749930e-01,2.02739746e+02,3.81534790e+02,3.08457553e-01,6.09931580e+02,1.90965225e+02,8.52251232e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.89060669e+02,1.81808380e+02,9.18046474e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.83172928e+02,4.18049194e+02,3.39648038e-01,1.88397385e+02,4.15465546e+02,3.80727261e-01,1.84499054e+02,3.76314850e+02,1.80140093e-01,1.81884399e+02,4.19350769e+02,1.50267333e-01,1.80583405e+02,4.12831909e+02,1.33601025e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00]
]
temp2 = np.array(temp)
# down state right[0:4] / waist up[5:9] / waist down[10:14]
temp3 = [
[6.32047974e+02,3.85434570e+02,5.47482789e-01,5.79891357e+02,3.39763214e+02,5.02019465e-01,5.78595703e+02,3.37144012e+02,6.31581664e-01,5.26352905e+02,3.07110626e+02,7.65270233e-01,5.34203369e+02,3.91950867e+02,8.06857467e-01,5.88980774e+02,3.39805664e+02,3.40077490e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.31129242e+02,3.69773468e+02,2.36681804e-01,4.25887360e+02,3.58039337e+02,2.43442237e-01,2.92803009e+02,3.78933807e+02,2.25970358e-01,1.71455917e+02,3.80238068e+02,4.53841299e-01,4.35042633e+02,3.78932007e+02,1.30664855e-01,2.88890594e+02,3.69756927e+02,1.16046175e-01,1.71415176e+02,3.80258057e+02,2.61213899e-01,6.42476013e+02,3.80210022e+02,7.10223675e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.39877808e+02,3.52824799e+02,8.14302087e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.68836075e+02,4.20640045e+02,2.55779892e-01,1.77961853e+02,4.15484985e+02,2.61431873e-01,1.58365509e+02,3.71103577e+02,1.98192596e-01,1.61017487e+02,4.16752136e+02,3.55456412e-01,1.55803864e+02,4.12846039e+02,3.14506024e-01,1.60968063e+02,3.74997284e+02,4.02450025e-01],
[6.33381104e+02,3.82849304e+02,5.65033019e-01,5.79862244e+02,3.38485718e+02,4.32872802e-01,5.78581909e+02,3.35866272e+02,5.73644578e-01,5.26366028e+02,3.07134186e+02,7.74067640e-01,5.34215454e+02,3.90714569e+02,8.12702656e-01,5.88995361e+02,3.38448700e+02,3.00870448e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.27212158e+02,3.71116119e+02,3.19190741e-01,4.21976624e+02,3.54136322e+02,3.18723559e-01,2.98005585e+02,3.78933472e+02,2.31346667e-01,1.71465271e+02,3.80214844e+02,3.76929671e-01,4.36345215e+02,3.90660767e+02,2.00466529e-01,2.92790710e+02,3.69778748e+02,5.59874475e-02,1.72734924e+02,3.80204376e+02,2.61225849e-01,6.42479309e+02,3.80150879e+02,7.26010323e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.39893616e+02,3.51559692e+02,8.25128436e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.83202637e+02,4.14142334e+02,1.84151754e-01,1.83193039e+02,4.12833405e+02,1.74112871e-01,1.60998184e+02,3.71104523e+02,2.00072095e-01,1.79267105e+02,4.12912292e+02,2.88990170e-01,1.62305038e+02,4.11571991e+02,2.23071739e-01,1.61001892e+02,3.73727112e+02,3.36365253e-01],
[6.34675659e+02,3.82860291e+02,6.01470828e-01,5.83779968e+02,3.35847870e+02,4.27537829e-01,5.79841492e+02,3.31942291e+02,6.07130945e-01,5.25063293e+02,3.07117737e+02,7.38624454e-01,5.35479431e+02,3.90709869e+02,8.25422049e-01,5.90333191e+02,3.37150421e+02,3.22668552e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.32403198e+02,3.63266479e+02,2.65404135e-01,4.25885925e+02,3.54125336e+02,2.70679206e-01,2.92799683e+02,3.75005920e+02,2.25720540e-01,1.71468491e+02,3.80197876e+02,4.71519232e-01,4.37638855e+02,3.73706848e+02,1.47057280e-01,2.91494568e+02,3.71097198e+02,5.73545657e-02,1.71454514e+02,3.80253601e+02,2.41764411e-01,6.42567322e+02,3.78922760e+02,7.07942009e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.39873718e+02,3.51518250e+02,8.44338715e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.63613144e+02,4.21940643e+02,3.52409303e-01,1.79256638e+02,4.16764008e+02,3.17471743e-01,1.59666809e+02,3.69821869e+02,1.90268859e-01,1.62278244e+02,4.16743774e+02,3.37683916e-01,1.54504150e+02,4.12864838e+02,2.95085341e-01,1.60989410e+02,3.73679840e+02,4.41494465e-01],
[6.24232849e+02,3.85471375e+02,5.61971068e-01,5.81169006e+02,3.37177399e+02,4.65016723e-01,5.78595642e+02,3.35848694e+02,6.02421045e-01,5.26387207e+02,3.07109253e+02,7.61803329e-01,5.35486755e+02,3.91946259e+02,8.22321951e-01,5.89008972e+02,3.37165527e+02,3.42138767e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.24611969e+02,3.67179230e+02,2.91608989e-01,4.20673676e+02,3.55448639e+02,2.79504240e-01,2.97998444e+02,3.77616089e+02,2.09327370e-01,1.72777298e+02,3.80228058e+02,2.87844986e-01,4.32422913e+02,3.77602753e+02,1.63837343e-01,2.92798523e+02,3.73720215e+02,5.52071407e-02,1.72757187e+02,3.80229340e+02,2.55728066e-01,6.34685730e+02,3.81534332e+02,6.56150341e-01,6.32033997e+02,3.90718414e+02,7.60763362e-02,6.38563721e+02,3.55449829e+02,7.84515142e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.83165283e+02,4.12860718e+02,1.29748851e-01,1.81844345e+02,4.11581390e+02,1.16328314e-01,1.63605072e+02,3.71133911e+02,2.12547615e-01,1.80583084e+02,4.12878937e+02,2.02317730e-01,1.80553696e+02,4.11565704e+02,1.54369593e-01,1.63596817e+02,3.74982117e+02,2.49781951e-01],
[6.32106812e+02,3.84158936e+02,5.63169956e-01,5.79885803e+02,3.38481842e+02,4.72464979e-01,5.78565369e+02,3.33263245e+02,6.00830078e-01,5.26379822e+02,3.07153595e+02,7.77154565e-01,5.34191528e+02,3.91947723e+02,8.06785226e-01,5.88967285e+02,3.39790863e+02,3.05283666e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.32397583e+02,3.68463867e+02,2.33080015e-01,4.21984985e+02,3.56745605e+02,2.94259489e-01,2.99326294e+02,3.76298004e+02,1.98152035e-01,1.71470123e+02,3.80209229e+02,4.35795248e-01,4.44149933e+02,3.80238770e+02,1.22255079e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.42546753e+02,3.80189758e+02,7.10188091e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.39893372e+02,3.51518585e+02,8.32520366e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.67531174e+02,4.15452820e+02,2.98095614e-01,1.62286789e+02,4.14136475e+02,2.51414239e-01,1.60991150e+02,3.73713837e+02,4.07809556e-01],
[6.20352417e+02,4.08942047e+02,4.97673452e-01,5.66819702e+02,3.54142761e+02,3.99321496e-01,5.70740601e+02,3.46300507e+02,5.41157722e-01,5.14620667e+02,3.09742401e+02,7.52242267e-01,5.38106323e+02,3.91944641e+02,8.62291932e-01,5.57702454e+02,3.69788239e+02,1.60820335e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.19364838e+02,2.91484619e+02,2.72603363e-01,4.14162415e+02,2.96731384e+02,2.89332658e-01,3.12370483e+02,3.48905731e+02,2.43343592e-01,1.87088669e+02,3.80258484e+02,4.02293801e-01,4.15459381e+02,2.82369385e+02,1.88115835e-01,3.09769073e+02,3.39791443e+02,2.17110366e-01,1.84515579e+02,3.81516479e+02,3.45964104e-01,6.28170593e+02,4.02362762e+02,7.60601759e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.22919373e+02,3.76300201e+02,8.21940362e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.07974594e+02,4.21928131e+02,3.98920238e-01,2.13168747e+02,4.15483154e+02,4.14105624e-01,1.63642899e+02,3.80173645e+02,2.83613175e-01,2.04067230e+02,4.19380859e+02,4.15874034e-01,1.93606201e+02,4.19370331e+02,3.70336443e-01,1.72761490e+02,3.78908875e+02,4.06442285e-01],
[6.21589539e+02,4.01149475e+02,6.74789071e-01,5.62920654e+02,3.55418335e+02,4.27368522e-01,5.69461304e+02,3.38503357e+02,5.78413606e-01,5.08096924e+02,3.09753235e+02,7.68527687e-01,5.38102844e+02,3.91958740e+02,8.70388329e-01,5.51181213e+02,3.77599152e+02,2.03647166e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.23290100e+02,3.16269440e+02,2.52324015e-01,4.23298615e+02,2.98023102e+02,2.75749952e-01,3.17585480e+02,3.41076752e+02,2.79982507e-01,1.88401459e+02,3.80240936e+02,4.06569064e-01,4.12867432e+02,3.28008331e+02,1.54329091e-01,3.20194183e+02,3.35857483e+02,1.97395384e-01,1.84489975e+02,3.80257507e+02,2.80422837e-01,6.29462524e+02,3.94568085e+02,7.00006723e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.21683350e+02,3.69836853e+02,8.80084872e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.10597336e+02,4.20647308e+02,3.39242160e-01,2.13226334e+02,4.14172913e+02,3.30356121e-01,1.63600235e+02,3.80194305e+02,2.66773731e-01,2.05380844e+02,4.18066345e+02,4.16150481e-01,1.94942200e+02,4.18055634e+02,3.61623466e-01,1.72763077e+02,3.78932617e+02,4.02397990e-01],
[6.16392456e+02,4.05020416e+02,5.08712828e-01,5.66832275e+02,3.55417358e+02,3.90318096e-01,5.70758911e+02,3.43704529e+02,5.50539911e-01,5.10717926e+02,3.08501373e+02,7.58545041e-01,5.38111511e+02,3.91967865e+02,8.72565389e-01,5.52475037e+02,3.73700256e+02,1.54337153e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.15471283e+02,2.88897217e+02,2.73215979e-01,4.07630493e+02,2.94092926e+02,2.50418991e-01,3.08462830e+02,3.50208466e+02,2.66790688e-01,1.88413559e+02,3.80243866e+02,3.60217512e-01,4.12854065e+02,2.79773651e+02,1.64669573e-01,3.12377747e+02,3.37168640e+02,1.64678365e-01,1.85806625e+02,3.80220490e+02,2.99116910e-01,6.22944275e+02,4.01096832e+02,7.45703459e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.21641235e+02,3.75001587e+02,8.48487377e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.09297699e+02,4.20703156e+02,3.82718205e-01,2.13201920e+02,4.15450531e+02,3.94258201e-01,1.63595581e+02,3.80173065e+02,2.70571887e-01,2.00154510e+02,4.20642548e+02,4.25645679e-01,1.91006714e+02,4.19353088e+02,3.74606907e-01,1.72770493e+02,3.78920349e+02,3.38812888e-01],
[6.16413025e+02,4.04998108e+02,6.18991852e-01,5.68131592e+02,3.51532013e+02,4.13450956e-01,5.69467834e+02,3.41087067e+02,5.40249348e-01,5.08112396e+02,3.09780853e+02,7.85565138e-01,5.38102600e+02,3.91968994e+02,8.62279356e-01,5.60304077e+02,3.69774200e+02,1.69913828e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.23276245e+02,2.92810577e+02,2.69895107e-01,4.16776398e+02,2.95399597e+02,3.06209147e-01,3.09760071e+02,3.50187531e+02,2.80929744e-01,1.92337219e+02,3.80230591e+02,4.25101757e-01,4.29801025e+02,2.86272827e+02,1.49621099e-01,3.11057739e+02,3.35850861e+02,1.68441534e-01,1.85798981e+02,3.80261536e+02,2.95810878e-01,6.22978943e+02,4.01036591e+02,7.33510852e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.22934753e+02,3.71158112e+02,8.59492481e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.05389450e+02,4.21950562e+02,3.74998838e-01,2.11907654e+02,4.15485687e+02,3.71531427e-01,1.66211197e+02,3.80169678e+02,3.02038968e-01,2.09288254e+02,4.16756226e+02,3.62740815e-01,1.98843842e+02,4.16756958e+02,3.12897414e-01,1.79241943e+02,3.78895905e+02,3.68428588e-01],
[6.12479065e+02,4.03739807e+02,5.73215365e-01,5.61595703e+02,3.54110748e+02,4.24166679e-01,5.68125427e+02,3.41059113e+02,5.73557436e-01,5.06842407e+02,3.08512604e+02,8.01834583e-01,5.36866516e+02,3.91956268e+02,8.69740963e-01,5.51184265e+02,3.72406830e+02,1.93221211e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.27194214e+02,3.13675262e+02,2.61065751e-01,4.21997864e+02,2.96709167e+02,3.06040436e-01,3.14976776e+02,3.39760712e+02,2.35583097e-01,1.87109650e+02,3.80239258e+02,3.75788689e-01,4.19380127e+02,3.28050568e+02,1.38807982e-01,3.14977417e+02,3.38461304e+02,2.08412647e-01,1.83221756e+02,3.81497009e+02,3.19476098e-01,6.21641846e+02,4.01112274e+02,7.32031345e-01,6.15123657e+02,4.08924133e+02,6.20452464e-02,6.22933289e+02,3.72414276e+02,8.45627546e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.10569260e+02,4.20653290e+02,3.59224737e-01,2.13176956e+02,4.14187958e+02,3.65916491e-01,1.63617065e+02,3.80227081e+02,3.00994873e-01,2.06675797e+02,4.16783142e+02,3.78005803e-01,1.94950241e+02,4.16773987e+02,3.28487247e-01,1.72757660e+02,3.78936707e+02,3.78136754e-01],
[6.38603882e+02,2.78419373e+02,8.18206906e-01,5.69434082e+02,2.86278717e+02,5.41431606e-01,5.69455017e+02,2.87585266e+02,7.66703665e-01,5.04174805e+02,3.07082977e+02,7.64328241e-01,5.35518250e+02,3.91931000e+02,8.41863155e-01,5.68160645e+02,2.78448334e+02,3.39931160e-01,4.74187256e+02,2.98067780e+02,7.70419776e-01,4.84657104e+02,3.44998901e+02,4.15241867e-01,4.42860596e+02,3.72409424e+02,1.91487610e-01,4.37631683e+02,3.75000946e+02,1.86974809e-01,3.16280090e+02,3.89372040e+02,1.47239164e-01,1.84492096e+02,3.78895966e+02,3.44814122e-01,4.44163727e+02,3.67175812e+02,1.38378620e-01,3.17586487e+02,3.82818268e+02,1.69606403e-01,1.85813477e+02,3.78920380e+02,2.62005389e-01,6.36003418e+02,2.68045746e+02,7.99653053e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.15099915e+02,2.65427368e+02,8.75968575e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.74068100e+02,4.22007812e+02,3.37564975e-01,1.81870300e+02,4.20694519e+02,3.77521008e-01,1.72721909e+02,3.69809692e+02,1.99747220e-01,1.80571854e+02,4.21929596e+02,2.25787759e-01,1.74074112e+02,4.20633392e+02,1.85430557e-01,1.72752014e+02,3.71110291e+02,2.84231544e-01],
[6.39892761e+02,2.84967377e+02,8.28767478e-01,5.69406250e+02,2.84941437e+02,5.74405015e-01,5.73359924e+02,2.88865662e+02,7.26654053e-01,5.05472412e+02,3.05830750e+02,7.91184545e-01,5.35500549e+02,3.91953308e+02,8.31510544e-01,5.64196838e+02,2.75819519e+02,4.00830388e-01,4.74169189e+02,2.98081512e+02,8.30549061e-01,4.85897278e+02,3.42387451e+02,4.84196126e-01,4.65039825e+02,3.80227081e+02,1.65077329e-01,4.61126373e+02,3.78920135e+02,1.47861987e-01,3.01925018e+02,3.80208588e+02,8.63665193e-02,1.85818848e+02,3.80247589e+02,3.02762151e-01,4.62431610e+02,3.78906525e+02,1.32391766e-01,3.01932465e+02,3.84130554e+02,8.75602067e-02,1.92331009e+02,3.80268463e+02,2.25662962e-01,6.39877930e+02,2.75759033e+02,8.47136617e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.18994080e+02,2.66731537e+02,8.87185752e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.77960815e+02,4.14193756e+02,1.26986489e-01,1.83173767e+02,4.14180847e+02,1.51694104e-01,1.75360382e+02,3.71061707e+02,1.31408438e-01,1.81887222e+02,4.12885193e+02,1.28552899e-01,1.81863098e+02,4.08936584e+02,1.21074028e-01,1.77949585e+02,3.72414154e+02,2.43740201e-01],
[6.38580017e+02,2.77101318e+02,8.29151452e-01,5.61631531e+02,2.78428223e+02,6.27660573e-01,5.69462708e+02,2.86284454e+02,7.57719338e-01,4.98994507e+02,3.07130096e+02,7.90295124e-01,5.36781921e+02,3.91946564e+02,8.59743595e-01,5.55080444e+02,2.69325623e+02,4.81569171e-01,4.74154846e+02,2.98073822e+02,8.36381733e-01,4.87235260e+02,3.50242126e+02,3.57961237e-01,4.44150604e+02,3.76311462e+02,2.04157382e-01,4.37640289e+02,3.76298767e+02,2.32548892e-01,3.04540039e+02,3.81527710e+02,1.36953712e-01,1.81901077e+02,3.82830597e+02,3.63100052e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.35963989e+02,2.65431030e+02,8.42292070e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.13794617e+02,2.64105042e+02,8.63788128e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.66236740e+02,4.18054016e+02,1.15851201e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.68832855e+02,3.80222046e+02,2.76797414e-01],
[6.39896667e+02,2.79765717e+02,7.59556055e-01,5.68119263e+02,2.84978455e+02,6.41285658e-01,5.74651062e+02,2.88902222e+02,7.12300003e-01,5.05498932e+02,3.05833282e+02,8.05060089e-01,5.35467590e+02,3.91958954e+02,8.26557279e-01,5.60288452e+02,2.75821838e+02,4.54625487e-01,4.74160919e+02,2.98091675e+02,8.31273675e-01,4.85899170e+02,3.43711121e+02,5.02939761e-01,4.54598724e+02,3.81525513e+02,1.77262858e-01,4.49384674e+02,3.82838989e+02,1.48144588e-01,3.21506531e+02,3.81570679e+02,1.00448169e-01,1.89711731e+02,3.81496368e+02,3.42128128e-01,4.54595581e+02,3.73701050e+02,1.41543522e-01,3.05841553e+02,3.82825317e+02,1.11558355e-01,1.92300507e+02,3.81515289e+02,2.54548043e-01,6.39904236e+02,2.71911560e+02,7.90786922e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.19045654e+02,2.66733307e+02,9.00960386e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.74042969e+02,4.19345154e+02,1.86846435e-01,1.81848633e+02,4.15471405e+02,2.16786683e-01,1.76642105e+02,3.71106262e+02,1.76044405e-01,1.75359299e+02,4.15456024e+02,1.84025332e-01,1.74044724e+02,4.10241821e+02,1.60412461e-01,1.79269104e+02,3.73701172e+02,2.91143835e-01],
[6.39867737e+02,2.77205719e+02,8.12405348e-01,5.66839417e+02,2.79781494e+02,6.06943846e-01,5.77246399e+02,2.87604523e+02,7.54960179e-01,5.05512695e+02,3.07089264e+02,8.17416489e-01,5.35488098e+02,3.91989044e+02,8.23065579e-01,5.55089111e+02,2.71919098e+02,4.56864566e-01,4.74184418e+02,2.98087189e+02,8.42585325e-01,4.85947418e+02,3.47598572e+02,4.41933841e-01,4.55907593e+02,3.73699066e+02,1.54780716e-01,4.55914246e+02,3.78916534e+02,1.35836184e-01,3.07142151e+02,3.80191925e+02,9.90398228e-02,1.85814590e+02,3.80258850e+02,2.17441976e-01,4.55915039e+02,3.65885162e+02,1.43073782e-01,3.07132477e+02,3.81569275e+02,1.28956854e-01,1.96236710e+02,3.81512543e+02,2.28588387e-01,6.39895691e+02,2.69312714e+02,8.20310533e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.20261475e+02,2.65449982e+02,9.21475530e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.83171738e+02,3.73710938e+02,5.35333678e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.80562607e+02,3.72408875e+02,1.46319196e-01,1.85798386e+02,4.11532959e+02,1.19319446e-01,1.84478745e+02,4.03744751e+02,1.17535420e-01,1.80541901e+02,3.75003967e+02,1.89084008e-01]
]
temp4 = np.array(temp3)
##### 팔 폈을때, 내렸을때 비교할 데이터들 ####
testUpCoord = temp2.reshape(3, 5, 75)
testDownCoord = temp4.reshape(3, 5, 75)

# Starting OpenPose
opWrapper = op.WrapperPython()
opWrapper.configure(params)
opWrapper.start()

while 1 :
	# Process Image
	frame, keypoint = getKeypoint(capture)

#### 키보드로 팔굽혀펴기 / 윗몸일으키기 설정 ####
	try:  # used try so that if user pressed other than the given key error will not be shown
		if ch == ord('1'):
			print('Push Up')
			pushup = True
			break  # finishing the loop
		elif ch == ord('2'):  # if key '2' is pressed
			print('Sit Up')
			pushup = False
			break  # finishing the loop
		else:
			pass
	except:
		break  # if user pressed other than the given key the loop will break

	image(frame, keypoint, 0,0)


#### 초기 자세 판단 ####
#자세가 옳바르다고 판단된 경우, 키보드로 입력받아서 시작
while 1:
	frame, keypoint = getKeypoint(capture)
	if ch == ord('q'): sys.exit(-1)

	if len(keypoint) != 75:  # 한 명이 아닐 때(0명 or 2명 이상)
		imageInitialize(frame, 10, state_Left, pushup)
		print("사람 인식이 제대로 안됨")
		continue
	else: 	#사람이 1명으로 인식될 때 좌/우 판단
		upper_mean = 0
		cnt = 0
		for i in range(0, 22, 3):  # 팔 평균
			if keypoint[i] != 0:
				upper_mean += keypoint[i]
				cnt += 1
		if cnt == 0:
			continue
		upper_mean /= cnt
		lower_mean = 0
		cnt = 0
		for i in range(24, 44, 3):  # 발 평균
			if keypoint[i] != 0:
				lower_mean += keypoint[i]
				cnt += 1
		if cnt == 0:
			continue
		lower_mean /= cnt
		if upper_mean == 0 or lower_mean == 0:
			continue
		if upper_mean < lower_mean:
			state_Left = True
		else:
			state_Left = False

	comparelist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
	if prev_list:
		for i in comparelist:
			if (keypoint[i * 3 + 2 < 0.1]) :
				idx = len(prev_list) - 1
				keypoint[i * 3] = prev_list[idx][i * 3]
				keypoint[i * 3 + 1] = prev_list[idx][i * 3 + 1]
				keypoint[i * 3 + 2] = prev_list[idx][i * 3 + 2]

	if pushup == True:
		if (state_Left == True):
			statePose = initializePoseLeft(keypoint)
		else:
			statePose = initializePoseRight(keypoint)
	else:
		statePose = 0

	if statePose == 0:
		imageInitialize(frame, 0, state_Left, pushup)
		break
	else:
		imageInitialize(frame, statePose, state_Left, pushup)

client_socket.sendall('Ready'.encode())

while not ch == ord('s'): 
	imageInitialize(frame, 0, state_Left, pushup)
	frame, keypoint = getKeypoint(capture)

### 좌, 우 선택 ###
if state_Left :
	part = [[3, 4, 5], [15, 16, 17], [18, 19, 20], [21, 22, 23], [24, 25, 26], [36, 37, 38], [39, 40, 41],
			[42, 43, 44]]
else:
	part = [[3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [24, 25, 26], [27, 28, 29], [30, 31, 32],
			[33, 34, 35]]

###윗몸일으키기 좌, 우 선택
if pushup == False and state_Left == True:
	# 1,2,3,4,8,9,10,11
	part = [[3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [24, 25, 26], [27, 28, 29], [30, 31, 32], [33, 34, 35]]
elif pushup == False and state_Left == False:
	# 1,5,6,7,8,12,13,14
	part = [[3, 4, 5], [15, 16, 17], [18, 19, 20], [21, 22, 23], [24, 25, 26], [36, 37, 38], [39, 40, 41], [42, 43, 44]]

presskey = 0
max_time_end = time.time() + timer
print("START")
client_socket.sendall('START'.encode())
bf_list = keypoint

# timer
while max_time_end > time.time():
	frame, keypoint = getKeypoint(capture)
	if ch == ord('q'): sys.exit(-1)

#### Remove another people's keypoint by Euclidean Distance
	if len(keypoint) < 75: # 0명
		continue
	if len(keypoint) > 75 : # 여러 명일 때
		err_list = []
		for i in range(0, len(keypoint), 75):
			err =0
			for j in range(1, 4):
				err += abs(bf_list[part[j][0]]-keypoint[part[j][0]])
				err += abs(bf_list[part[j][1]]-keypoint[part[j][1]])
			err_list.append(err)
		minv = err_list.index(min(err_list))
		keypoint = keypoint[0+75*minv:75+75*minv]

#### fill the blank keypoint from previous keypoint
	if prev_list:
		if keypoint[part[0][2]] < 0.1:
			idx = len(prev_list) - 1
			keypoint[part[0][0]] = prev_list[idx][part[0][0]]
			keypoint[part[0][1]] = prev_list[idx][part[0][1]]
			keypoint[part[0][2]] = prev_list[idx][part[0][2]]
		if keypoint[part[1][2]] < 0.1:
			idx = len(prev_list) - 1
			keypoint[part[1][0]] = prev_list[idx][part[1][0]]
			keypoint[part[1][1]] = prev_list[idx][part[1][1]]
			keypoint[part[1][2]] = prev_list[idx][part[1][2]]
		if keypoint[part[2][2]] < 0.05:
			idx = len(prev_list) - 1
			keypoint[part[2][0]] = prev_list[idx][part[2][0]]
			keypoint[part[2][1]] = prev_list[idx][part[2][1]]
			keypoint[part[2][2]] = prev_list[idx][part[2][2]]
		if keypoint[part[3][2]] < 0.05:
			idx = len(prev_list) - 1
			keypoint[part[3][0]] = prev_list[idx][part[3][0]]
			keypoint[part[3][1]] = prev_list[idx][part[3][1]]
			keypoint[part[3][2]] = prev_list[idx][part[3][2]]
		if keypoint[part[5][2]] < 0.05:
			idx = len(prev_list) - 1
			keypoint[part[5][0]] = prev_list[idx][part[5][0]]
			keypoint[part[5][1]] = prev_list[idx][part[5][1]]
			keypoint[part[5][2]] = prev_list[idx][part[5][2]]
		if keypoint[part[6][2]] < 0.05:
			idx = len(prev_list) - 1
			keypoint[part[6][0]] = prev_list[idx][part[6][0]]
			keypoint[part[6][1]] = prev_list[idx][part[6][1]]
			keypoint[part[6][2]] = prev_list[idx][part[6][2]]
		if keypoint[part[7][2]] < 0.05:
			idx = len(prev_list) - 1
			keypoint[part[7][0]] = prev_list[idx][part[7][0]]
			keypoint[part[7][1]] = prev_list[idx][part[7][1]]
			keypoint[part[7][2]] = prev_list[idx][part[7][2]]


	if keypoint[part[2][2]] == 0 or keypoint[part[1][2]]==0 or keypoint[part[3][2]]==0:
		continue

	### push up
	if pushup :
		arm = angle(keypoint[part[1][0]], keypoint[part[1][1]], keypoint[part[2][0]], keypoint[part[2][1]], keypoint[part[3][0]], keypoint[part[3][1]])
		body = angle(keypoint[part[0][0]], keypoint[part[0][1]], keypoint[part[5][0]], keypoint[part[5][1]], keypoint[part[6][0]], keypoint[part[6][1]])
		leg = angle(keypoint[part[5][0]], keypoint[part[5][1]], keypoint[part[6][0]], keypoint[part[6][1]], keypoint[part[7][0]], keypoint[part[7][1]])
	### sit up
	else:
		arm = angle(keypoint[part[1][0]], keypoint[part[1][1]], keypoint[part[2][0]], keypoint[part[2][1]], keypoint[part[3][0]], keypoint[part[3][1]])
		if state_Left :
			body = angle(keypoint[part[0][0]], keypoint[part[0][1]], keypoint[part[4][0]], keypoint[part[4][1]], keypoint[part[4][0]] + 50, keypoint[part[4][1]])
		else :
			body = angle(keypoint[part[0][0]], keypoint[part[0][1]], keypoint[part[4][0]], keypoint[part[4][1]], keypoint[part[4][0]] - 50, keypoint[part[4][1]])
		leg = angle(keypoint[part[5][0]], keypoint[part[5][1]], keypoint[part[6][0]], keypoint[part[6][1]], keypoint[part[7][0]], keypoint[part[7][1]])


	prev_list.append(keypoint)
	prev_angle.append([arm, body, leg])
	###################### 최소값, 최댓값 #####################
	arm_his.append(arm)
	leg_his.append(leg)
	body_his.append(body)
	keypoint_his.append(keypoint)
	image(frame, score_state, count, max_time_end - time.time())
	### push up ###
	if pushup == True:
		if state and arm < 130 and abs(arm_his[len(arm_his) - 2] - arm) < 20:
			arm_angle_top.append(max(arm_his))
			top_fr = arm_his.index(max(arm_his))
			leg_angle_top.append(leg_his[top_fr])
			body_angle_top.append(body_his[top_fr])
			testKeypoint = keypoint_his[top_fr]

			# 몸통, 다리 평균 각도
			score = 0
			body_angle_mean = np.mean(body_his)
			leg_angle_mean = np.mean(leg_his)
			# 최대 팔 각도
			if max(arm_his) > 170:
				score += 4
			elif max(arm_his) > 165:
				score += 3
			elif max(arm_his) > 160:
				score += 2
			elif max(arm_his) > 155:
				score += 1
			# 몸통
			if body_angle_mean > 170:
				score += 4
			elif body_angle_mean > 165:
				score += 3
			elif body_angle_mean > 160:
				score += 2
			elif body_angle_mean > 155:
				score += 1
			# 다리
			if leg_angle_mean > 165:
				score += 4
			elif leg_angle_mean > 160:
				score += 3
			elif leg_angle_mean > 155:
				score += 2
			elif leg_angle_mean > 140:
				score += 1
			###### 자세 평가 ######
			# elif body_angle_mean < 160:
			# 	pose = 5
			# elif leg_angle_mean < 150:
			# 	pose = 6
			
			sim = []
			for i in range(len(testUpCoord)):
				sim.append(getSimilarity(testKeypoint, testUpCoord[i], state_Left, True))
			pose = sim.index(max(sim))
			
			if pose == 0 and max(arm_his) < 160:
				pose = 3
			sim.clear()
			##### 자세 평가 종료 #####
			keypoint_his.clear()
			leg_his.clear()
			arm_his.clear()
			body_his.clear()
			state = False

		if not state and arm > 130 and abs(arm_his[len(arm_his) - 2] - arm) < 20:
			arm_angle_bottom.append(min(arm_his))
			bottom_fr = arm_his.index(min(arm_his))
			leg_angle_bottom.append(leg_his[bottom_fr])
			body_angle_bottom.append(body_his[bottom_fr])
			testKeypoint = keypoint_his[bottom_fr]
			# 몸통, 다리 평균 각도
			body_angle_mean = np.mean(body_his)
			leg_angle_mean = np.mean(leg_his)
			# 최대 팔 각도
			if min(arm_his) < 70:
				score += 4
			elif min(arm_his) < 75:
				score += 3
			elif min(arm_his) < 80:
				score += 2
			elif min(arm_his) < 85:
				score += 1
			# 몸통
			if body_angle_mean > 170:
				score += 4
			elif body_angle_mean > 165:
				score += 3
			elif body_angle_mean > 160:
				score += 2
			elif body_angle_mean > 155:
				score += 1
			# 다리
			if leg_angle_mean > 165:
				score += 4
			elif leg_angle_mean > 160:
				score += 3
			elif leg_angle_mean > 155:
				score += 2
			elif leg_angle_mean > 140:
				score += 1

			###### 자세 평가 ######
			# elif body_angle_mean < 160:
			# 	pose = 5
			# elif leg_angle_mean < 150:
			# 	pose = 6
			if pose == 0:
				sim = []
				for i in range(len(testDownCoord)):
					sim.append(getSimilarity(testKeypoint, testDownCoord[i], state_Left, True))
				pose = sim.index(max(sim))
				sim.clear()
			if pose == 0 and min(arm_his) > 85:
				pose = 4
			##### 자세 평가 종료 #####

			leg_his.clear()
			arm_his.clear()
			body_his.clear()
			keypoint_his.clear()
			state = True
			if pose == 0:
				count += 1
				print('count: {}'.format(count))
				client_socket.sendall(str(count).encode())
				
				if score > 20:
					score_state = "Good"
					print("Good")
				elif score > 14:
					score_state = "Normal"
					print("Normal")
			else:
				poseEval(pose)
				score_state = "Bad"
				print("Bad")
			
			print("score: {}".format(score))

	### Sit up ###
	else:
		if state and body < 135 and abs(body_his[len(body_his) - 2] - body) < 20:
			body_angle_top.append(max(body_his))
			top_fr = body_his.index(max(body_his))
			leg_angle_top.append(leg_his[top_fr])
			arm_angle_top.append(arm_his[top_fr])
			score = 0

			leg_his.clear()
			arm_his.clear()
			body_his.clear()
			state = False

		if not state and body > 145 and abs(body_his[len(body_his) - 2] - body) < 20:
			body_angle_bottom.append(min(body_his))
			bottom_fr = body_his.index(min(body_his))
			leg_angle_bottom.append(leg_his[bottom_fr])
			arm_angle_bottom.append(arm_his[bottom_fr])

			# 최대 몸통 각도
			if min(body_his) < 85:
				score += 3
			elif min(body_his) < 110:
				score += 2
			else :
				score += 0

			
			if score > 2:
				score_state = "Good"
				print("Good")
				count += 1
				client_socket.sendall(str(count).encode())
			elif score > 1:
				score_state = "Normal"
				print("Normal")
				count += 1
				client_socket.sendall(str(count).encode())
			else:
				score_state = "Bad"
				print("Bad")
				client_socket.sendall("upup".encode())

			leg_his.clear()
			arm_his.clear()
			body_his.clear()
			state = True

client_socket.sendall('end'.encode())
client_socket.close()
server_socket.close()
capture.release()
cv2.destroyAllWindows()
opWrapper.stop()